const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  firstName: {
    type: String,
    required: true,
  },
  lastName: {
    type: String,
    required: true,
  },
  middleName: {
    type: String,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },

  phone: {
    type: String,
    default: null,
  },

  address: {
    type: String,
    default: null,
  },

  image: {
    type: String,
    default: 'default.jpg',
  },

  otp: {
    type: Number,
    default: null,
  },

  otpExpires: {
    type: Date,
    default: null,
  },

  verifyStatus: {
    type: Boolean,
    default: false,
  },

  loginAttempts: {
    type: Number,
    default: 0,
  },

  lockUntil: {
    type: Date,
    default: null,
  },

  lockCount: {
    type: Number,
    default: 0,
  },

  resetPasswordOTP: {
    type: Number,
    default: null,
  },

  resetPasswordExpires: {
    type: Date,
    default: null,
  },
});

const User = mongoose.model('users', userSchema);

module.exports = User;

const mongoose = require('mongoose');

const taskSchema = new mongoose.Schema({
  project: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: 'projects',
  },
  list: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: 'lists',
  },

  name: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    default: null,
  },
  index: {
    type: Number,
    required: true,
  },
  members: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'users',
    },
  ],

  startDate: {
    type: Date,
    default: null,
  },
  endDate: {
    type: Date,
    default: null,
  },
  status: {
    type: String,
    default: 'pending',
  },
  priority: {
    type: String,
    default: 'low',
  },
  taskRequirements: [
    {
      type: String,
    },
  ],
  taskProgress: {
    type: Number,
    default: 0,
  },
  taskCover: {
    type: String,
    default: null,
  },
  taskAttachments: [
    {
      type: String,
    },
  ],
  taskLabel: [
    {
      name: String,
      color: String,
    },
  ],
  comments: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'comments',
    },
  ],
});

const Task = mongoose.model('tasks', taskSchema);

module.exports = Task;

const mongoose = require('mongoose');

const projectSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    required: true,
  },
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: 'users',
  },

  image: {
    type: String,
    default: null,
  },

  members: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'users',
    },
  ],
  tasks: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'tasks',
    },
  ],
  lists: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'lists',
    },
  ],
  admin: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'users',
    },
  ],
  invited: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'users',
    },
  ],
  requests: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'users',
    },
  ],

  chats: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'chats',
  },

  isPrivate: {
    type: Boolean,
    default: false,
  },

  permissions: {
    commenting: {
      type: String,
      default: 'all',
    },
    taskEditing: {
      type: String,
      default: 'all',
    },
    taskDeleting: {
      type: String,
      default: 'all',
    },
    taskAdding: {
      type: String,
      default: 'all',
    },
    listEditing: {
      type: String,
      default: 'all',
    },
    listDeleting: {
      type: String,
      default: 'all',
    },
    listAdding: {
      type: String,
      default: 'all',
    },
    listMoving: {
      type: String,
      default: 'all',
    },
    taskMoving: {
      type: String,
      default: 'all',
    },
    changePermissions: {
      type: String,
      default: 'all',
    },
    chat: {
      type: String,
      default: 'all',
    },

    channelCreation: {
      type: String,
      default: 'all',
    },
    timeline: {
      type: String,
      default: 'all',
    },
    calendar: {
      type: String,
      default: 'all',
    },
  },
});

const Project = mongoose.model('projects', projectSchema);

module.exports = Project;


const mongoose = require('mongoose');

const messageSchema = new mongoose.Schema(
  {
    sender: {
      type: mongoose.Schema.Types.ObjectId,
      required: true,
      ref: 'users', // Reference the 'users' collection for the sender
    },
    text: {
      type: String,
      required: true,
    },

    type: {
      type: String,
      required: true,
    },
    isChannel: {
      type: Boolean,

      default: false,
    },
    channel: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'channels', // Reference the 'chats' collection
    },
    recipient: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'users', // Reference the 'users' collection for the recipient
    },

    whoRead: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'users',
      },
    ],
  },
  { timestamps: true }
  // Timestamps are automatically added by Mongoose
);

const Message = mongoose.model('messages', messageSchema);

module.exports = Message;


const mongoose = require('mongoose');

const listSchema = new mongoose.Schema({
  project: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: 'projects',
  },
  name: {
    type: String,
    required: true,
  },
  tasks: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'tasks',
    },
  ],
  index: {
    type: Number,
    required: true,
  },
});

const List = mongoose.model('lists', listSchema);

module.exports = List;


const mongoose = require('mongoose');

const channelSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  project: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: 'projects',
  },
  messages: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'messages', // References the messages sent in the channel
    },
  ],
  newMessageReadBy: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'users', // References the users who have read the latest message
    },
  ],
});

const Channel = mongoose.model('channels', channelSchema);

module.exports = Channel;


const mongoose = require('mongoose');

const callSchema = new mongoose.Schema(
  {
    channel: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'channels',
      required: true,
      index: true,
    },

    callType: {
      type: String,
      enum: ['audio', 'video'],
      required: true,
    },

    host: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'users',
      required: true,
    },

    participants: [
      {
        user: {
          type: mongoose.Schema.Types.ObjectId,
          ref: 'users',
          required: true,
        },
        joinedAt: {
          type: Date,
          required: true,
        },
        leftAt: {
          type: Date,
        },
        status: {
          type: String,
          enum: ['active', 'left'],
          default: 'active',
        },
      },
    ],

    status: {
      type: String,
      enum: ['ongoing', 'ended'],
      default: 'ongoing',
      index: true,
    },

    metadata: {
      sessionId: {
        type: String,
        required: true,
        unique: true,
      },
      roomId: {
        type: String,
        required: true,
      },
      token: {
        type: String,
        required: true,
      },
      startedAt: {
        type: Date,
        required: true,
      },
    },

    endedAt: Date,
  },
  {
    timestamps: true,
  }
);

// Indexes
callSchema.index({ channel: 1, status: 1 });
callSchema.index({ host: 1 });
callSchema.index({ 'participants.user': 1 });

callSchema.methods.isHost = function (userId) {
  return this.host.toString() === userId.toString();
};

callSchema.methods.isParticipant = function (userId) {
  return this.participants.some(
    (p) => p.user.toString() === userId.toString() && p.status === 'active'
  );
};

callSchema.methods.getActiveParticipants = function () {
  return this.participants.filter((p) => p.status === 'active');
};

callSchema.methods.getDuration = function () {
  const start = new Date(this.metadata.startedAt);
  const end = this.endedAt ? new Date(this.endedAt) : new Date();
  return end - start;
};

module.exports = mongoose.model('calls', callSchema);

const mongoose = require('mongoose');

const notificationSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: 'users',
  },
  text: {
    type: String,
    required: true,
  },
  date: {
    type: Date,
    default: Date.now,
  },
  type: {
    type: String,
    required: true,
  },
});

const Notification = mongoose.model('notifications', notificationSchema);

module.exports = Notification;
